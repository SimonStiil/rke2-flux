---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: elastic-eck
  name: local-secrets-store-role
rules:
- apiGroups: [""]
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - authorization.k8s.io
  resources:
  - selfsubjectrulesreviews
  verbs:
  - create
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: local-secrets
  namespace: elastic-eck
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: local-secrets
  namespace: elastic-eck
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: local-secrets-store-role
subjects:
- kind: ServiceAccount
  name: local-secrets
  namespace: elastic-eck
---
apiVersion: external-secrets.io/v1
kind: SecretStore
metadata:
  name: local-secrets
  namespace: elastic-eck
spec:
  provider:
    kubernetes:
      # with this, the store is able to pull only from `default` namespace
      remoteNamespace: elastic-eck
      server:
        caProvider:
          type: ConfigMap
          name: kube-root-ca.crt
          key: ca.crt
      auth:
        serviceAccount:
          name: "local-secrets"
---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: object-bucket-claim-user
  namespace: elastic-eck
spec:
  secretStoreRef:
    name: elastic-clustersecretstore
    kind: ClusterSecretStore
  refreshInterval: 1h
  target:
    name: object-bucket-claim-user
    template:
      type: Opaque
      data:
        s3.client.default.access_key: "{{ .accesskey | toString }}"
        s3.client.default.secret_key: "{{ .secretkey | toString }}"
  data:
    - secretKey: accesskey
      remoteRef:
        key: es-repo
        property: AWS_ACCESS_KEY_ID
    - secretKey: secretkey
      remoteRef:
        key: es-repo
        property: AWS_SECRET_ACCESS_KEY

---